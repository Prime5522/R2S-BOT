import asyncio, time
from pyrogram import Client, enums
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from pyrogram.errors import FloodWait
from config import *
from utils import get_hash
from Script import script
from plugins.save_media import save_batch_media_in_channel, save_media_in_channel
from database import db
from shortzy import Shortzy

MediaList = {}
ConfirmMsgs = {}
UserFiles = {}

async def safe_send_cached_media(client, chat_id, file_id):
    while True:
        try:
            return await client.send_cached_media(chat_id=chat_id, file_id=file_id)
        except FloodWait as e:
            await asyncio.sleep(e.value)

# ==== Helper: get real Telegram file_id from message_id ====
async def get_real_file_id(client, msg_id):
    msg = await client.get_messages(DB_CHANNEL, msg_id)
    media = msg.document or msg.video or msg.audio or msg.photo
    if not media:
        return None
    return media.file_id
	
@Client.on_callback_query()
async def cb_handler(client: Client, query: CallbackQuery):
    user_id = query.from_user.id
  
    if query.data == "close_data":
        await query.message.delete()
        
    elif query.data == "about":
        buttons = [[
	    InlineKeyboardButton('‚Ä¢  ú·¥è·¥ç·¥á ‚Ä¢', callback_data='start'),
	    InlineKeyboardButton('‚Ä¢ ·¥Ñ ü·¥ès·¥á ‚Ä¢', callback_data='close_data')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        me2 = (await client.get_me()).mention
        await query.message.edit_text(
            text=script.ABOUT_TXT.format(me2, me2),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    
    elif query.data == "start":
        buttons = [[
            InlineKeyboardButton("‚Ä¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö ‚Ä¢", url="https://t.me/AV_BOTz_UPDATE"),
                InlineKeyboardButton("‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", url="https://t.me/AV_SUPPORT_GROUP")
        ],[
            InlineKeyboardButton('‚Ä¢  ú·¥á ü·¥ò ‚Ä¢', callback_data='help'),
            InlineKeyboardButton('‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ ‚Ä¢', callback_data='about')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.START_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
	    )
	    
    elif query.data == "help":
        buttons = [[
	    InlineKeyboardButton('‚Ä¢  ú·¥è·¥ç·¥á ‚Ä¢', callback_data='start'),
	    InlineKeyboardButton('‚Ä¢ ·¥Ñ ü·¥ès·¥á ‚Ä¢', callback_data='close_data')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.HELP_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )     

    elif query.data.startswith("stream"):
        msg_id = int(query.data.split('#', 1)[1])  # ‡§Ø‡•á ‡§π‡•à message_id

            # üõ° Security: check if user is allowed to access this file
        try:
                # DB_CHANNEL ‡§∏‡•á message ‡§≤‡•ã
            msg = await client.get_messages(DB_CHANNEL, msg_id)
            if not msg:
                return await query.answer("‚ö†Ô∏è File not found!", show_alert=True)

                # Optionally: ‡§Ø‡§π‡§æ‡§Å owner check ‡§≠‡•Ä ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç (‡§Ö‡§ó‡§∞ ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡•á save_media ‡§Æ‡•á‡§Ç owner_uid save ‡§π‡•ã‡§§‡§æ ‡§π‡•ã)
                # ‡§Ö‡§≠‡•Ä simple access ‡§¶‡§ø‡§Ø‡§æ ‡§π‡•à
        except Exception:
            return await query.answer("‚ö†Ô∏è Invalid file!", show_alert=True)

            # ‡§Ö‡§∏‡§≤‡•Ä file_id ‡§≤‡•ã
        real_file_id = await get_real_file_id(client, msg_id)
        if not real_file_id:
            return await query.answer("‚ö†Ô∏è Media not found!", show_alert=True)

            # Cached media ‡§≠‡•á‡§ú‡•ã BIN_CHANNEL ‡§Æ‡•á‡§Ç
        AKS = await safe_send_cached_media(client, BIN_CHANNEL, real_file_id)

            # Links ‡§¨‡§®‡§æ‡§ì
        file_hash = get_hash(AKS)
        online = f"{URL}/watch/{AKS.id}/AV_File_{int(time.time())}.mkv?hash={file_hash}"
        download = f"{URL}/{AKS.id}?hash={file_hash}"

        btn = [
                [
                    InlineKeyboardButton("‚ñ∂ ·¥°·¥Ä·¥õ·¥Ñ ú ·¥è…¥ ü…™…¥·¥á", url=online),
                    InlineKeyboardButton("‚¨á Íú∞·¥Äs·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö", url=download)
                ],
                [InlineKeyboardButton('‚ùå ·¥Ñ ü·¥ès·¥á ‚ùå', callback_data='close_data')]
        ]

        return await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup(btn)
		)

    elif query.data == "addToBatchTrue":
        # file id store in db
        file_msg_id = query.message.reply_to_message.id
        await db.add_media(user_id, file_msg_id)

        # user ka original file bhi save karo
        await db.add_user_file(user_id, file_msg_id)

        # edit confirmation msg
        confirm = await query.message.edit(
            "‚úÖ Íú∞…™ ü·¥á s·¥Ä·¥†·¥á·¥Ö …™…¥  ô·¥Ä·¥õ·¥Ñ ú!\n\n·¥ò Ä·¥áss  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ  ô·¥Ä·¥õ·¥Ñ ú  ü…™…¥·¥ã..",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì¶ G·¥á·¥õ B·¥Ä·¥õ·¥Ñ ú L…™…¥·¥ã", callback_data="getBatchLink")],
                [InlineKeyboardButton("‚ùå ·¥Ñ ü·¥ès·¥á", callback_data='close_data')]
            ])
        )

        # save confirmation msg id
        await db.add_confirm_msg(user_id, confirm.id)
        return

    elif query.data == "getBatchLink":
        message_ids = await db.get_media(user_id)
        if not message_ids:
            return await query.answer("‚ö†Ô∏è B·¥Ä·¥õ·¥Ñ ú L…™Íú±·¥õ E·¥ç·¥ò·¥õ è!", show_alert=True)

        # ‚úÖ ‡§®‡§Ø‡§æ waiting message
        editable = await client.send_message(
            chat_id=query.message.chat.id,
            text="‚è≥ ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢  ô·¥Ä·¥õ·¥Ñ ú  ü…™…¥·¥ã..."
        )

        # ‚úÖ Batch save
        await save_batch_media_in_channel(
            bot=client,
            editable=editable,
            message_ids=message_ids,
            owner_uid=user_id
        )

        # clear batch
        await db.clear_media(user_id)

        # ‚úÖ 30 sec baad delete karein confirmations + files
        async def delete_later():
            await asyncio.sleep(30)

            # delete confirmation msgs
            for msg_id in await db.get_confirm_msgs(user_id):
                try:
                    await client.delete_messages(chat_id=query.message.chat.id, message_ids=msg_id)
                except:
                    pass
            await db.clear_confirm_msgs(user_id)

            # delete original files
            for msg_id in await db.get_user_files(user_id):
                try:
                    await client.delete_messages(chat_id=query.message.chat.id, message_ids=msg_id)
                except:
                    pass
            await db.clear_user_files(user_id)

        asyncio.create_task(delete_later())
        return
		
    elif query.data == "addToBatchFalse":
        # ‚úÖ File save karo
        await save_media_in_channel(
            bot=client,
            message=query.message.reply_to_message,
            editable=query.message
		)
        if query.message.reply_to_message:
            await query.message.reply_to_message.delete()
        return
		
    elif query.data.startswith("user_reset"):
        await db.reset_user(int(user_id))   # <-- ‡§Æ‡§æ‡§® ‡§≤‡•á‡§§‡§æ ‡§π‡•Ç‡§Å ‡§ï‡§ø db ‡§Æ‡•á‡§Ç reset_user() method ‡§π‡•à
        await query.answer("‚úÖ Y·¥è·¥ú Ä Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥  Ä·¥áÍú±·¥á·¥õ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±“ì·¥ú ü ü è.", show_alert=True)

        # üéõÔ∏è Edit message with Back button
        buttons = [
            [InlineKeyboardButton("‚âº  ô·¥Ä·¥Ñ·¥ã", callback_data=f"user_details#{user_id}")]
        ]
        await query.message.edit_text(
            "‚öôÔ∏è ·¥Ä ü ü  è·¥è·¥ú Ä ·¥ús·¥á Ä ·¥Ö·¥Ä·¥õ·¥Ä  ú·¥ÄÍú±  ô·¥á·¥á…¥  Ä·¥ás·¥á·¥õ.!\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ …¥·¥è·¥° Íú∞ Ä·¥ás ú ü è ·¥úÍú±·¥á ·¥õ ú·¥á  ô·¥è·¥õ.",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
		
    elif query.data.startswith("user_details"):
        user = await db.get_user(int(user_id))

        shortener_api = user.get("shortener_api") or "…¥·¥è·¥õ s·¥á·¥õ"
        base_site = user.get("base_site") or "…¥·¥è·¥õ s·¥á·¥õ"
        custom_caption = user.get("custom_caption") or "…¥·¥è·¥õ s·¥á·¥õ"
        verify_api = user.get("verify_api") or "…¥·¥è·¥õ s·¥á·¥õ"
        verify_site = user.get("verify_site") or "…¥·¥è·¥õ s·¥á·¥õ"
        verify_expire = user.get("verify_expire") or "…¥·¥è·¥õ s·¥á·¥õ"
        how_to_download = user.get("how_to_download") or "…¥·¥è·¥õ s·¥á·¥õ"
        verify = "‚úÖ True" if user.get("verify") else "‚ùå False"
        log_channel = user.get("log_channel") or "…¥·¥è·¥õ s·¥á·¥õ"
        fsub_channels = user.get("fsub_channels") or []
        protect_content = "‚úÖ True" if user.get("protect_content") else "‚ùå False"

        # ‡§∏‡•Å‡§Ç‡§¶‡§∞ format ‡§Æ‡•á‡§Ç text ‡§¨‡§®‡§æ‡§§‡•á ‡§π‡•à‡§Ç
        text = (
            "‚öôÔ∏è **  è·¥è·¥ú Ä s·¥á·¥õ·¥õ…™…¥…¢s Íú∞·¥è Ä Íú∞…™ ü·¥á s·¥õ·¥è Ä·¥á\n\n"
            f"‚úÖÔ∏è  ·¥†·¥á Ä…™Íú∞ è s ú·¥è Ä·¥õ…¥·¥á Ä …¥·¥Ä·¥ç·¥á/·¥Ä·¥ò…™\n"
            f"…¥·¥Ä·¥ç·¥á - {verify_site}\n"
            f"·¥Ä·¥ò…™ - {verify_api}\n\n"

            f"‚úÖ s ú·¥è Ä·¥õ…¥·¥á Ä …¥·¥Ä·¥ç·¥á/·¥Ä·¥ò…™\n"
            f"…¥·¥Ä·¥ç·¥á - {base_site}\n"
            f"·¥Ä·¥ò…™ - {shortener_api}\n\n"

            f"üß≠ ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ ·¥õ…™·¥ç·¥á - {verify_expire}\n\n"
            f"üìò ·¥†·¥á Ä…™Íú∞ è - {verify}\n\n"
            f"‚ö° ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã - {how_to_download}\n\n"
            f"‚≠ïÔ∏è ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ ·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õ - {protect_content}\n\n"
            f"üßæ Íú∞-s·¥ú ô ·¥Ñ ú·¥Ä…¥…¥·¥á ü - {', '.join([str(ch) for ch in fsub_channels]) if fsub_channels else '…¥·¥è·¥õ s·¥á·¥õ'}\n\n"
            f"üìú  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü - {log_channel}\n\n"
            f"üìù ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥ - {custom_caption}\n"
        )

        btn = [
            [InlineKeyboardButton("‚ôª R·¥áÍú±·¥á·¥õ S·¥á·¥õ·¥õ…™…¥…¢Íú±", callback_data=f"user_reset#{user_id}")],
            [InlineKeyboardButton("‚âº  ô·¥Ä·¥Ñ·¥ã", callback_data=f"settings#{user_id}")]
        ]

        await query.message.edit(text, reply_markup=InlineKeyboardMarkup(btn))
		
    elif query.data.startswith("force_channel_setgs"):
        _, user_id = query.data.split("#")
        settings = await db.get_user(int(user_id))
        btn = [[
            InlineKeyboardButton('s·¥á·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ', callback_data=f'set_force_channel#{user_id}'),
            InlineKeyboardButton('·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü', callback_data=f'force_channel_delete#{user_id}')
        ],[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'settings#{user_id}')
        ]]
        channels = settings.get("fsub_channels", [])
        if not channels:
            channel = " è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è Íú∞·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™ ô·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü..."
        else:
            try:
                chat_titles = []
                for ch in channels:
                    chat = await client.get_chat(ch)
                    chat_titles.append(f"<b>{chat.title}</b> (<code>{ch}</code>)")
                channel = "Force Channels:\n" + "\n".join(chat_titles)
            except Exception as e:
                channel = f"‚ö†Ô∏è Error fetching channels: <code>{e}</code>"

        await query.message.edit(
            f" ú·¥á Ä·¥á  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä  ô·¥è·¥õ Íú∞·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™ ô·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á üs.\n\n{channel}", 
            reply_markup=InlineKeyboardMarkup(btn))
		
    elif query.data.startswith("force_channel_delete"):
        _, user_id = query.data.split("#")
        btn = [[
        InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'force_channel_setgs#{user_id}')
        ]]
        settings = await db.get_user(int(user_id))
        channels = settings.get("fsub_channels", [])
        if not channels:
            await query.answer(" è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è Íú∞·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™ ô·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü...", show_alert=True)
            return
        await db.update_user_info(int(user_id), {"fsub_channels": []})
        await query.message.edit_text("s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö Íú∞·¥è Ä·¥Ñ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü üóë", reply_markup=InlineKeyboardMarkup(btn))

    elif query.data.startswith("set_force_channel"):
        _, user_id = query.data.split("#")
        btn = [[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'force_channel_setgs#{user_id}')
        ]]

        await query.message.edit_text(
            f"Íú±·¥á…¥·¥Ö ·¥è…¥·¥á ·¥è Ä ·¥ç·¥è Ä·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™·¥ÖÍú± Íú±·¥á·¥ò·¥Ä Ä·¥Ä·¥õ·¥á·¥Ö  ô è Íú±·¥ò·¥Ä·¥Ñ·¥á:\n\n"
            f"**Example:** `-1001234567890 -1009876543210`\n\n"
            f"/cancel - ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss."
        )

        msg = await client.listen(query.from_user.id)

        if msg.text.strip() == "/cancel":
            await query.message.delete()
            await query.message.reply("‚ùå ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss...", reply_markup=InlineKeyboardMarkup(btn))
            return
        await query.message.delete()
        # multiple IDs split ‡§ï‡§∞‡§ï‡•á list ‡§¨‡§®‡§æ ‡§≤‡•ã
        channel_ids = msg.text.split()
        added_channels, failed_channels = [], []
        await query.message.delete()
        settings = await db.get_user(int(user_id))
        channels = settings.get("fsub_channels", [])

        for ch_id in channel_ids:
            try:
                ch_id = int(ch_id)  # ensure int
                chat = await client.get_chat(ch_id)

                # ‚úÖ Bot admin check (invite link ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂)
                try:
                    await client.create_chat_invite_link(chat.id)
                except Exception:
                    failed_channels.append(f"{chat.title} (<code>{ch_id}</code>) - ‚ùå Bot not admin")
                    continue

                # ‡§Ö‡§ó‡§∞ already ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§§‡•ã DB ‡§Æ‡•á‡§Ç save ‡§ï‡§∞‡•ã
                if ch_id not in channels:
                    channels.append(ch_id)
                    added_channels.append(f"{chat.title} (<code>{ch_id}</code>) ‚úÖ")

            except Exception as e:
                failed_channels.append(f"<code>{ch_id}</code> - ‚ùå {str(e)}")
        await query.message.delete()
        # update DB
        await db.update_user_info(int(user_id), {"fsub_channels": channels})

        # response message
        text = "üì¢ Force Channel Update Result:\n\n"
        if added_channels:
            text += "‚úÖ Added:\n" + "\n".join(added_channels) + "\n\n"
        if failed_channels:
            text += "‚ö†Ô∏è Failed:\n" + "\n".join(failed_channels)

        await query.message.reply(text, reply_markup=InlineKeyboardMarkup(btn))

    elif query.data.startswith("log_channel_setgs"):
        _, user_id = query.data.split("#")
        settings = await db.get_user(int(user_id))
        btn = [[
            InlineKeyboardButton('s·¥á·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü', callback_data=f'set_log_channel#{user_id}'),
            InlineKeyboardButton('·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü', callback_data=f'log_channel_delete#{user_id}')
        ],[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'settings#{user_id}')
        ]]
        if settings['log_channel'] == "":
            channel = " è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü‚ùóÔ∏è"
        else:
            chat = await client.get_chat(settings['log_channel'])
            channel = f" è·¥è·¥ú Ä  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü - {chat.title}"
        await query.message.edit(
            f"<b>üìù  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±:\n\n·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü:{channel}</b>", 
            reply_markup=InlineKeyboardMarkup(btn)
	    )
    elif query.data.startswith("set_log_channel"):
        _, user_id = query.data.split("#")
        btn = [[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'log_channel_setgs#{user_id}')
        ]]
        await query.message.edit_text(f"<b>Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥ è ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥ç·¥á,\n·¥Ä…¥·¥Ö ·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á @{BOT_USERNAME} …™s ·¥Ä·¥Ö·¥ç…™…¥ …™…¥  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü.\n\n/cancel - ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss.</b>")
        msg = await client.listen(query.from_user.id)
        if msg.text == '/cancel':
            await query.message.delete()
            await query.message.reply("·¥Ñ·¥Ä…¥·¥Ñ·¥á ü·¥á·¥Ö ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss...", reply_markup=InlineKeyboardMarkup(btn))
            return
        if msg.forward_from_chat and msg.forward_from_chat.type == enums.ChatType.CHANNEL:
            chat_id = msg.forward_from_chat.id
        else:
            await query.message.delete()
            await query.message.reply('…¥·¥è·¥õ Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö Íú∞ Ä·¥è·¥ç ·¥Ñ ú·¥Ä…¥…¥·¥á ü', reply_markup=InlineKeyboardMarkup(btn))
            return
        await query.message.delete()
        try:
            chat = await client.get_chat(chat_id)
            t = await client.send_message(chat.id, 'Test!')
            await t.delete()
        except Exception as e:
            await query.message.reply(f'üíî s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢...\n\n<code>{e}</code>', reply_markup=InlineKeyboardMarkup(btn))
            return
        await db.update_user_info(int(user_id), {"log_channel": chat.id})
        await query.message.reply(f"‚ö°Ô∏è s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö  è·¥è·¥ú Ä  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü - {chat.title}", reply_markup=InlineKeyboardMarkup(btn))

    elif query.data.startswith("log_channel_delete"):
        _, user_id = query.data.split("#")
        btn = [[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'log_channel_setgs#{user_id}')
        ]]
        settings = await db.get_user(int(user_id))
        if settings['log_channel'] == "":
            await query.answer(" è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü.", show_alert=True)
            return
        await db.update_user_info(int(user_id), {"log_channel": ""})
        await query.message.edit_text("s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö  è·¥è·¥ú Ä  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ‚úÖ", reply_markup=InlineKeyboardMarkup(btn))
		
    elif query.data.startswith("update_protect_mode"):
        _, user_id = query.data.split("#")
        settings = await db.get_user(int(user_id))
        btn = [[
            InlineKeyboardButton('·¥õ·¥ú Ä…¥ ·¥èÍú∞Íú∞ ‚ùå ' if settings['protect_content'] else '·¥õ·¥ú Ä…¥ ·¥è…¥ ‚úÖ', callback_data=f"clone_files_mode#{user_id}#{settings['protect_content']}")
        ],[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'settings#{user_id}')
        ]]
        mode = '·¥õ·¥ú Ä…¥ ·¥è…¥ ‚úÖ' if settings['protect_content'] else '·¥õ·¥ú Ä…¥ ·¥èÍú∞Íú∞ ‚ùå'
        await query.message.edit(f" ú·¥á Ä·¥á  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä  ô·¥è·¥õ …¢…™·¥†·¥á…¥ Íú∞…™ ü·¥áÍú± ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ…™·¥è…¥, ·¥ç·¥á·¥Ä…¥Íú± ·¥° ú·¥á·¥õ ú·¥á Ä ·¥úÍú±·¥á ÄÍú± ·¥Ñ·¥Ä…¥ Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö  è·¥è·¥ú Ä Íú∞…™ ü·¥á ·¥è Ä …¥·¥è·¥õ....\n\n·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ:- {mode}", reply_markup=InlineKeyboardMarkup(btn))
    
    elif query.data.startswith("clone_files_mode"):
        _, user_id, status = query.data.split("#")
        if status == 'True':
            await db.update_user_info(int(user_id), {"protect_content": False})
        else:
            await db.update_user_info(int(user_id), {"protect_content": True})
        settings = await db.get_user(int(user_id))
        btn = [[
            InlineKeyboardButton('·¥õ·¥ú Ä…¥ ·¥èÍú∞Íú∞ ‚ùå ' if settings['protect_content'] else '·¥õ·¥ú Ä…¥ ·¥è…¥ ‚úÖ', callback_data=f"clone_files_mode#{user_id}#{settings['protect_content']}")
        ],[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'settings#{user_id}')
        ]]
        mode = '·¥õ·¥ú Ä…¥ ·¥è…¥ ‚úÖ' if settings['protect_content'] else '·¥õ·¥ú Ä…¥ ·¥èÍú∞Íú∞ ‚ùå'
        await query.message.edit(f" ú·¥á Ä·¥á  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä  ô·¥è·¥õ …¢…™·¥†·¥á…¥ Íú∞…™ ü·¥áÍú± ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ…™·¥è…¥, ·¥ç·¥á·¥Ä…¥Íú± ·¥° ú·¥á·¥õ ú·¥á Ä ·¥úÍú±·¥á ÄÍú± ·¥Ñ·¥Ä…¥ Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö  è·¥è·¥ú Ä Íú∞…™ ü·¥á ·¥è Ä …¥·¥è·¥õ....\n\n·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ:- {mode}", reply_markup=InlineKeyboardMarkup(btn))
    
    elif query.data.startswith("tutorial_setgs"):
        _, user_id = query.data.split("#")
        settings = await db.get_user(int(user_id))
        btn = [[
            InlineKeyboardButton('s·¥á·¥õ ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü', callback_data=f'set_tutorial#{user_id}'),
            InlineKeyboardButton('·¥Ö·¥á ü·¥á·¥õ·¥á ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü', callback_data=f'tutorial_delete#{user_id}')
        ],[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'settings#{user_id}')
        ]]
        if settings['how_to_download'] == "":
            tutorial = "·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã..."
        else:
            tutorial = f" ü…™…¥·¥ã - {settings['how_to_download']}"
        await query.message.edit(f" ú·¥á Ä·¥á  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä  ô·¥è·¥õ ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü ·¥†…™·¥Ö·¥á·¥è  ü…™…¥·¥ã Íú∞·¥è Ä  ú·¥è·¥° ·¥õ·¥è ·¥è·¥ò·¥á…¥  ü…™…¥·¥ã.\n\n{tutorial}", disable_web_page_preview=True, reply_markup=InlineKeyboardMarkup(btn))

    elif query.data.startswith("set_tutorial"):
        _, user_id = query.data.split("#")
        uid = int(user_id)		
        btn = [[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'tutorial_setgs#{user_id}')
        ]]
        await query.message.edit_text("s·¥á…¥·¥Ö ·¥ç·¥á ·¥Ä ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã...\n\n/cancel - ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss.")
        msg = await client.listen(query.from_user.id)
        if msg.text == '/cancel':
            await query.message.delete()
            await query.message.reply("·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss...", reply_markup=InlineKeyboardMarkup(btn))
            return
        await db.update_user_info(int(user_id), {"how_to_download": msg.text})
        await query.message.delete()
        await query.message.reply("s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è s·¥á·¥õ ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã ‚úÖ", reply_markup=InlineKeyboardMarkup(btn))

    elif query.data.startswith("tutorial_delete"):
        _, user_id = query.data.split("#")
        btn = [[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'tutorial_setgs#{user_id}')
        ]]
        settings = await db.get_user(int(user_id))
        if settings['how_to_download'] == "":
            await query.answer(" è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã", show_alert=True)
            return
        await db.update_user_info(int(user_id), {"how_to_download": ""})
        await query.message.edit_text('‚ö†Ô∏è s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã...', reply_markup=InlineKeyboardMarkup(btn))
	
    elif query.data.startswith("verify_time_setgs"):
        _, user_id = query.data.split("#")
        settings = await db.get_user(int(user_id))

        verify_time = settings.get("verify_expire", 0)
        btn = [
            [InlineKeyboardButton("‚è≥ Íú±·¥á·¥õ ·¥õ…™·¥ç·¥á", callback_data=f"set_verify_time#{user_id}")],
            [InlineKeyboardButton("‚âº  ô·¥Ä·¥Ñ·¥ã", callback_data=f"verify_setgs#{user_id}")]
        ]
        await query.message.edit_text(
            f"<b>V·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ T…™·¥ç·¥á S·¥á·¥õ·¥õ…™…¥…¢Íú±</b>\n\n"
            f"‚è∞ C·¥ú Ä Ä·¥á…¥·¥õ T…™·¥ç·¥á: <code>{verify_time if verify_time else 'N·¥è·¥õ S·¥á·¥õ'}</code> sec",
            reply_markup=InlineKeyboardMarkup(btn)
        )

    elif query.data.startswith("set_verify_time"):
        _, user_id = query.data.split("#")
        btn = [[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'verify_time_setgs#{user_id}')
        ]]		
        await query.message.edit_text(
            "<b>S·¥á…¥·¥Ö ·¥ç·¥á ·¥Ä ·¥õ…™·¥ç·¥á  ü…™·¥ã·¥á:</b>\n"
            "`10m` ‚Üí 10 minutes\n"
            "`1h` ‚Üí 1 hour\n"
            "`30s` ‚Üí 30 seconds\n\n"
            "/cancel - ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss..."
        )
        msg = await client.listen(int(user_id))
        if msg.text == "/cancel":
            await query.message.delete()
            await query.message.reply("·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss...", reply_markup=InlineKeyboardMarkup(btn))
            return
        await query.message.delete() 			
        try:
            arg = msg.text.lower()
            if arg.endswith("s"):
                seconds = int(arg[:-1])
            elif arg.endswith("m"):
                seconds = int(arg[:-1]) * 60
            elif arg.endswith("h"):
                seconds = int(arg[:-1]) * 3600
            elif arg.endswith("d"):
                seconds = int(arg[:-1]) * 86400
            else:
                seconds = int(arg)
        except:
            return await query.message.reply("‚ùå I…¥·¥†·¥Ä ü…™·¥Ö “ì·¥è Ä·¥ç·¥Ä·¥õ. Ex·¥Ä·¥ç·¥ò ü·¥á: 10m or 2h", quote=True)
        await query.message.delete()
        await db.update_user_info(int(user_id), {"verify_expire": seconds})
        await query.message.reply(f"‚úÖ V·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ ·¥õ…™·¥ç·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö ·¥õ·¥è <b>{seconds} Íú±·¥á·¥Ñ·¥è…¥·¥ÖÍú±</b>", reply_markup=InlineKeyboardMarkup(btn))
		
    elif query.data.startswith("verify_setgs"):
        _, user_id = query.data.split("#")
        settings = await db.get_user(int(user_id))
        btn = [[
			InlineKeyboardButton('·¥èÍú∞Íú∞ ·¥†·¥á Ä…™Íú∞ è' if settings['verify'] else '·¥è…¥ ·¥†·¥á Ä…™Íú∞ è', callback_data=f"update_verify#{user_id}#{settings['verify']}")
        ],[
            InlineKeyboardButton('s·¥á·¥õ ·¥†·¥á Ä…™Íú∞ è ', callback_data=f'set_verify#{user_id}'),
            InlineKeyboardButton('·¥Ö·¥á ü·¥á·¥õ·¥á ·¥†·¥á Ä…™Íú∞ è ', callback_data=f'verify_delete#{user_id}')
		],[
            InlineKeyboardButton("Íú±·¥á·¥õ ·¥†·¥á Ä…™“ì è ·¥õ…™·¥ç·¥á", callback_data=f"verify_time_setgs#{user_id}")
        ],[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'settings#{user_id}')
        ]]
        verify_status = '·¥è…¥ ‚úÖ' if settings['verify'] else '·¥èÍú∞Íú∞ ‚ùå'
        if settings['verify_api'] == "":
            api_url = " è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è ·¥†·¥á Ä…™Íú∞ è"
        else:
            api_url = f"·¥ú Ä ü - <code>{settings['verify_site']}</code>\n·¥Ä·¥ò…™ - <code>{settings['verify_api']}</code>"
        await query.message.edit(f"<b> ú·¥á Ä·¥á  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä  ô·¥è·¥õ ·¥†·¥á Ä…™Íú∞ è ·¥°…™·¥õ ú …¢…™·¥†·¥á…¥ Íú∞…™ ü·¥ás.\n\n·¥†·¥á Ä…™Íú∞ è - {verify_status}\n\n{api_url}</b>", reply_markup=InlineKeyboardMarkup(btn))

    elif query.data.startswith("set_verify"):
        _, user_id = query.data.split("#")
        btn = [[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'verify_setgs#{user_id}')
        ]]
        await query.message.edit_text("<b>s·¥á…¥·¥Ö ·¥ç·¥á ·¥Ä ·¥†·¥á Ä…™Íú∞ è ·¥ú Ä ü...\n\n/cancel - ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss.</b>")
        url_msg = await client.listen(query.from_user.id)
        url = url_msg.text
        if url_msg.text == '/cancel':
            await query.message.delete()
            await query.message.reply("·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss...", reply_markup=InlineKeyboardMarkup(btn))
            return
        await query.message.delete()
        a = await query.message.reply("s·¥á…¥·¥Ö ·¥ç·¥á ·¥†·¥á Ä…™Íú∞ è ·¥Ä·¥ò…™...")
        api_msg = await client.listen(query.from_user.id)
        api = api_msg.text
        await db.update_user_info(int(user_id), {
            "verify_site": url,
            "verify_api": api,
            "verify": True
        })
        await a.delete()
        await query.message.reply("s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è s·¥á·¥õ ·¥†·¥á Ä…™Íú∞ è ‚úÖ", reply_markup=InlineKeyboardMarkup(btn))

    elif query.data.startswith("update_verify"):
        _, user_id, status = query.data.split("#")
        settings = await db.get_user(int(user_id))
        if settings['verify_api'] == "":
            await query.answer("‚ö†Ô∏è  è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è ·¥†·¥á Ä…™Íú∞ è...", show_alert=True)
            return
        if status == 'True':
            await db.update_user_info(int(user_id), {"verify": False})
        else:
            await db.update_user_info(int(user_id), {"verify": True})
        settings = await db.get_user(int(user_id))
        btn = [[
			InlineKeyboardButton('·¥èÍú∞Íú∞ ·¥†·¥á Ä…™Íú∞ è' if settings['verify'] else '·¥è…¥ ·¥†·¥á Ä…™Íú∞ è', callback_data=f"update_verify#{user_id}#{settings['verify']}")
        ],[
            InlineKeyboardButton('s·¥á·¥õ ·¥†·¥á Ä…™Íú∞ è ', callback_data=f'set_verify#{user_id}'),
            InlineKeyboardButton('·¥Ö·¥á ü·¥á·¥õ·¥á ·¥†·¥á Ä…™Íú∞ è ', callback_data=f'verify_delete#{user_id}')
		],[
            InlineKeyboardButton("Íú±·¥á·¥õ ·¥†·¥á Ä…™“ì è ·¥õ…™·¥ç·¥á", callback_data=f"verify_time_setgs#{user_id}")
        ],[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'settings#{user_id}')
        ]]
        verify_status = '·¥è…¥ ‚úÖ' if settings['verify'] else '·¥èÍú∞Íú∞ ‚ùå'
        await query.message.edit(f"<b> ú·¥á Ä·¥á  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä  ô·¥è·¥õ ·¥†·¥á Ä…™Íú∞ è ·¥°…™·¥õ ú …¢…™·¥†·¥á…¥ Íú∞…™ ü·¥ás.\n\n·¥†·¥á Ä…™Íú∞ è - {verify_status}\n\n·¥ú Ä ü - <code>{settings['verify_site']}</code>\n·¥Ä·¥ò…™ - <code>{settings['verify_api']}</code></b>", reply_markup=InlineKeyboardMarkup(btn))

    elif query.data.startswith("verify_delete"):
        _, user_id = query.data.split("#")
        btn = [[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'verify_setgs#{user_id}')
        ]]
        settings = await db.get_user(int(user_id))
        if settings['verify_api'] == "":
            await query.answer("‚ö†Ô∏è  è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è ·¥†·¥á Ä…™Íú∞ è...", show_alert=True)
            return
        await db.update_user_info(int(user_id), {
            "verify": False,
            "verify_api": None,
            "verify_site": None
        })
        await query.message.edit_text("üóë s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥†·¥á Ä…™Íú∞ è...", reply_markup=InlineKeyboardMarkup(btn))

	
    elif query.data.startswith("shortlink_setgs"):
        _, user_id = query.data.split("#")
        settings = await db.get_user(int(user_id))
        btn = [[
            InlineKeyboardButton('s·¥á·¥õ s ú·¥è Ä·¥õ ü…™…¥·¥ã', callback_data=f'set_shortlink#{user_id}'),
            InlineKeyboardButton('·¥Ö·¥á ü·¥á·¥õ·¥á s ú·¥è Ä·¥õ ü…™…¥·¥ã ', callback_data=f'shortlink_delete#{user_id}')
        ],[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'settings#{user_id}')
        ]]
        if settings['shortener_api'] == "":
            api_url = " è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è s ú·¥è Ä·¥õ ü…™…¥·¥ã"
        else:
            api_url = f"·¥ú Ä ü - <code>{settings['base_site']}</code>\n·¥Ä·¥ò…™ - <code>{settings['shortener_api']}</code>"
        await query.message.edit(f"<b> ú·¥á Ä·¥á  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä  ô·¥è·¥õ s ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥°…™·¥õ ú …¢…™·¥†·¥á…¥ Íú∞…™ ü·¥ás.\n\n{api_url}</b>", reply_markup=InlineKeyboardMarkup(btn))

    elif query.data.startswith("set_shortlink"):
        _, user_id = query.data.split("#")
        btn = [[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'shortlink_setgs#{user_id}')
        ]]
        await query.message.edit_text("<b>s·¥á…¥·¥Ö ·¥ç·¥á ·¥Ä s ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥ú Ä ü...\n\n/cancel - ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss.</b>")
        url_msg = await client.listen(query.from_user.id)
        url = url_msg.text
        if url_msg.text == '/cancel':
            await query.message.delete()
            await query.message.reply("·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss...", reply_markup=InlineKeyboardMarkup(btn))
            return
        await query.message.delete()
        a = await query.message.reply("s·¥á…¥·¥Ö ·¥ç·¥á s ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥Ä·¥ò…™...")
        api_msg = await client.listen(query.from_user.id)
        api = api_msg.text
        await db.update_user_info(int(user_id), {
            "base_site": url,
            "shortener_api": api
        })
        await a.delete()
        await query.message.reply("s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è s·¥á·¥õ s ú·¥è Ä·¥õ ü…™…¥·¥ã ‚úÖ", reply_markup=InlineKeyboardMarkup(btn))

    elif query.data.startswith("shortlink_delete"):
        _, user_id = query.data.split("#")
        btn = [[
            InlineKeyboardButton('‚âº  ô·¥Ä·¥Ñ·¥ã', callback_data=f'shortlink_setgs#{user_id}')
        ]]
        settings = await db.get_user(int(user_id))
        if settings['shortener_api'] == "":
            await query.answer("‚ö†Ô∏è  è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥Ä…¥ è s ú·¥è Ä·¥õ ü…™…¥·¥ã...", show_alert=True)
            return
        await db.update_user_info(int(user_id), {
            "base_site": "",
            "shortener_api": ""
        })
        await query.message.edit_text("üóë s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö s ú·¥è Ä·¥õ ü…™…¥·¥ã...!", reply_markup=InlineKeyboardMarkup(btn))

    elif query.data.startswith("caption_setgs"):
        _, user_id = query.data.split("#")
        user = await db.get_user(int(user_id))
        caption = user.get("custom_caption", "…¥·¥è·¥õ Íú±·¥á·¥õ!")
        btn = [[
            InlineKeyboardButton("üìù s·¥á·¥õ ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥", callback_data=f"set_caption#{user_id}")
		],[
            InlineKeyboardButton("‚ôªÔ∏è ·¥Ö·¥áÍú∞·¥Ä·¥ú ü·¥õ ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥", callback_data=f"default_caption#{user_id}")
        ],[
            InlineKeyboardButton("‚âº  ô·¥Ä·¥Ñ·¥ã", callback_data=f"settings#{user_id}")
        ]]
        await query.message.edit(f"**üìù  ú·¥á Ä·¥á  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä  ô·¥è·¥õ …¢…™·¥†·¥á…¥ Íú∞…™ ü·¥á ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥.\n\n**üìå Íú∞…™ ü·¥á ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥ -:`{caption}`", disable_web_page_preview=True, reply_markup=InlineKeyboardMarkup(btn))

    elif query.data.startswith("default_caption"):
        _, user_id = query.data.split("#")
        btn = [[
            InlineKeyboardButton("‚âº  ô·¥Ä·¥Ñ·¥ã", callback_data=f"caption_setgs#{user_id}")
        ]]
        await db.update_user_info(int(user_id), {"custom_caption": ""})
        await query.message.edit_text("‚úÖ s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è s·¥á·¥õ ·¥õ·¥è ·¥Ö·¥áÍú∞·¥Ä·¥ú ü·¥õ Íú∞…™ ü·¥á ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥....", reply_markup=InlineKeyboardMarkup(btn))
        
    elif query.data.startswith("set_caption"):
        _, user_id = query.data.split("#")
        btn = [[
            InlineKeyboardButton("‚âº  ô·¥Ä·¥Ñ·¥ã", callback_data=f"caption_setgs#{user_id}")
        ]]
        await query.message.edit_text("‚úçÔ∏è s·¥á…¥·¥Ö ·¥ç·¥á ·¥Ä Íú∞…™ ü·¥á ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥.\n\n·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á Íú∞…™ ü ü…™…¥…¢:-\n`{file_name}` - File name\n`{file_size}` - File size\n\n/cancel - ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss.")
        msg = await client.listen(query.from_user.id)   # user ka reply wait karega
        if msg.text == "/cancel":
            await query.message.delete()
            await query.message.reply("‚ùå ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss...!", reply_markup=InlineKeyboardMarkup(btn))
            return
        try:
            msg.text.format(file_name='file_name', file_size='file_size')
        except Exception as e:
            await query.message.delete()
            await query.message.reply(f'·¥° Ä·¥è…¥…¢ Íú∞·¥è Ä·¥ç·¥Ä·¥õ <code>{e}</code> ·¥ús·¥á·¥Ö...', reply_markup=InlineKeyboardMarkup(btn))
            return
        await db.update_user_info(int(user_id), {"custom_caption": msg.text})
        await query.message.delete()
        await query.message.reply(f"‚úÖ s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è s·¥á·¥õ Íú∞…™ ü·¥á ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥ -\n\n{msg.text}", disable_web_page_preview=True, reply_markup=InlineKeyboardMarkup(btn))

    elif query.data.startswith("settings"):
        _, user_id = query.data.split("#")
        buttons = [
        [InlineKeyboardButton("üìù C·¥Ä·¥ò·¥õ…™·¥è…¥ S·¥á·¥õ·¥õ…™…¥…¢Íú±", callback_data=f"caption_setgs#{user_id}")],
        [InlineKeyboardButton("üîó S·¥á·¥õ S ú·¥è Ä·¥õ·¥á…¥·¥á Ä",    callback_data=f"shortlink_setgs#{user_id}")],
        [InlineKeyboardButton("‚úÖ V·¥á Ä…™“ì è S·¥á·¥õ·¥õ…™…¥…¢Íú±",  callback_data=f"verify_setgs#{user_id}")],
        [InlineKeyboardButton("üé¨ T·¥ú·¥õ·¥è Ä…™·¥Ä ü S·¥á·¥õ·¥õ…™…¥…¢Íú±",callback_data=f"tutorial_setgs#{user_id}")],
        [InlineKeyboardButton("üõ° P Ä·¥è·¥õ·¥á·¥Ñ·¥õ S·¥á·¥õ·¥õ…™…¥…¢Íú±", callback_data=f"update_protect_mode#{user_id}")],
        [InlineKeyboardButton("üì¢ F·¥è Ä·¥Ñ·¥á S·¥ú ôÍú±·¥Ñ Ä…™ ô·¥á ", callback_data=f"force_channel_setgs#{user_id}")],
        [InlineKeyboardButton("üì¢ L·¥è…¢ C ú·¥Ä…¥…¥·¥á ü",      callback_data=f"log_channel_setgs#{user_id}")],
        [InlineKeyboardButton("üìë M è D·¥á·¥õ·¥Ä…™ üÍú±", callback_data=f"user_details#{user_id}")]
        ]
        await query.message.edit_text("**‚öôÔ∏è Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± ·¥ç·¥á…¥·¥ú:\n\ns·¥á ü·¥á·¥Ñ·¥õ ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è ·¥Ñ·¥ús·¥õ·¥è·¥ç…™·¥¢·¥á  è·¥è·¥ú Ä Íú∞…™ ü·¥ás s·¥á·¥õ·¥õ…™…¥…¢s:",reply_markup=InlineKeyboardMarkup(buttons))
		
